Objects
    formating
        var objectName={
            properties1:"value",
            properties2:"value"
        };
        or
        var objectName= new Object();
        or
        var objectName= create.Object();    
    assigning keys and values
    var objectName={};
    objectName.param="value"; //param will be the key
    or
    objectName["param"]="value";
    or

    How to use
        alert(objectName.properties1);
    Methods
        An Object property with a function as a value
            var objectName ={
                propertyMethod: function(){
                    some function
                }
            }
    Objects constructor
        Function that creates templates for Objects
        function objectTemplate(value1,value2){
            this.parameter= value1; /*general way to create and object*/
            this.parameter= value2;
        }
        How to invoke
            var objectName= New objectTemplate("..","...");
    types of Objects
        host Objects
            Objects defined by the enviorament in which your code is run
        Core Objects
            Objects defined by and built into the Javacript language itself
Global variables can be used on local functions. But not the other way around.
Its better use "var" when declaring a variable.
Coding conventions
    indentation
    using methods with their Objects
    Leaving extra spaces

creating a object property with bracket notation
    objectName['property']= 'value'
property   
    to change the propertys attribute we use 
        Object.defineProperty(objectName,'property', {writable:false}) //writable is the attribute
    with the enumarable attribute set in false, you can't numerable the property. But you can still show     
    with the configurable attribute set in false, it cannot be changed any property like enumerable or delete any property. But it can set writable as false. 
    getters & setters attribute allows us to create a property using another propertys values.
        var cat={
            name: 'fluffy',
            color: 'white'
        }
    Object.defineProperty(objectName, 'propertyName',{
        get:function(){
            return this.name+ " " + this.color
        }
    })
prototypes and inheritance
     a function's prototype is the instance that will become the prototype for all objects created using this constructor.
        function objectName(value1, value2){
            this.name= value1
            this.color= value2
        }
        objectName.prototype.age=4

     an object's prototype is the object instance from which the object inherited.
        Object.__proto__.age

        
