Objects
    formating
        var objectName={
            properties1:"value",
            properties2:"value"
        };
    How to use
        alert(objectName.properties1);
    Methods
        An Object property with a function as a value
            var objectName ={
                propertyMethod: function(){
                    some function
                }
            }
    Objects constructor
        Function that creates templates for Objects
        function objectTemplate(value1,value2){
            this.parameter= value1; /*general way to create and object*/
            this.parameter= value2;
        }
        How to invoke
            var objectName= New objectTemplate("..","...");
    types of Objects
        host Objects
            Objects defined by the enviorament in which your code is run
        Core Objects
            Objects defined by and built into the Javacript language itself
Global variables can be used on local functions. But not the other way around.
Its better use "var" when declaring a variable.
Coding conventions
    indentation
    using methods with their Objects
    Leaving extra spaces

creating a object property with bracket notation
    objectName['property']= 'value'
property   
    to change the propertys attribute we use 
        Object.defineProperty(objectName,'property', {writable:false}) //writable is the attribute
    with the enumarable attribute set in false, you can't numerable the property. But you can still show     
    with the configurable attribute set in false, it cannot be changed any property like enumerable or delete any property. But it can set writable as false. 
    getters & setters attribute allows us to create a property using another propertys values.
        var cat={
            name: 'fluffy',
            color: 'white'
        }
    Object.defineProperty(objectName, 'propertyName',{
        get:function(){
            return this.name+ " " + this.color
        }
    })
prototypes and inheritance
     a function's prototype is the instance that will become the prototype for all objects created using this constructor.
        function objectName(value1, value2){
            this.name= value1
            this.color= value2
        }
        objectName.prototype.age=4

     an object's prototype is the object instance from which the object inherited.
        Object.__proto__.age

Patttern
    uses the new keyword. it will
        create a new object
        links to an object property

    Contructor formating
        var objectName= function(parameter){
            this.name= name;
            this.completed= false;
            this.complete= function(){
                some code
            }
            this.save= function(){
                some code
            }
        }
    var objectName2= new objectName("new template"); // this will create and objectName prototype call objectName2, with the parameter new template.  
    Prototypes
        Allow us to  uses predifined methods or propertys in all the new objects
            objectName.prototype.complete= function(){
                some code
            }
            objectName.prototype.save =function(){
                some code
            }// with this every new object with the constructor objectName will have the predefined methods save and complete.
    In node.js we can breakdown this constructors in diferent files with
    
        {
            some code
        }
        module exports= someName //the name of the file were the object is 

        in the the file we want to impor the files
        var objectName = requiere('./someName');
    In angular js the way to create constructors is using the app.factory

    (function(){
        var app = angular.module('controller');
        app.factory('objectName',function(){ //object name will be the name of the object protetype in angular

            some propertys of the task
            return objectName;
        });
    }());
    Module Patttern
        Simple way to encapsulate  methods

        var objectName =function(){
            var someFunction= function{
                some code
                };      //methods we store in this object
            return{
                get:get         //list of methods we return 
            }
        }
        module.exports
    factory Patttern
        simplifies object creation
        creating diferent objects based on need
        repository creation

